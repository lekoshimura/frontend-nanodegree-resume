0:00:00.670,0:00:03.290
So here we have our function, inName.

0:00:03.290,0:00:07.650
It takes in a parameter called name, so when we take a name we want to call

0:00:07.650,0:00:12.610
trim, which removes the white space from the front and the back of that string.

0:00:12.610,0:00:16.010
So our string currently will look something like this, we can

0:00:16.010,0:00:20.140
see that this string doesn't have any differentiation between the first name and

0:00:20.140,0:00:21.170
the last name.

0:00:21.170,0:00:25.570
So we have to call a function called split, and we pass in the character or

0:00:25.570,0:00:29.050
string that we want to split the source string from.

0:00:29.050,0:00:34.760
So in this case, it's a space which occurs here between Sebastian and Thrun.

0:00:34.760,0:00:38.830
Now when we call split, it returns an array of Sebastian and

0:00:38.830,0:00:43.440
Thrun, our next line here prints out that to the console.

0:00:43.440,0:00:47.230
This next line, name one equals name one to

0:00:47.230,0:00:51.520
uppercase changes our last name to totally uppercase.

0:00:51.520,0:00:55.230
So in this array down here, we have name zero and

0:00:55.230,0:00:59.460
we have name one which has been turned into totally upper case.

0:00:59.460,0:01:01.210
This next line is a little bit tricky.

0:01:01.210,0:01:07.487
Let's take it piece by piece, name[0].slice(0,1).toUpperCase().

0:01:07.487,0:01:12.820
The .slice function takes in two parameters of where to start and

0:01:12.820,0:01:16.270
where to end in a string and creates a substring.

0:01:16.270,0:01:21.640
So for this one in name[0] right here it's starting at position 0.

0:01:21.640,0:01:25.220
It's converting that to upper case, which it already was,

0:01:25.220,0:01:29.590
but our function doesn't have a way of knowing that and then it appends it to,

0:01:29.590,0:01:33.660
to a slice starting at position one, and converting that string to lowercase.

0:01:33.660,0:01:38.770
If you don't pass in a second parameter, it goes to the end of the string.

0:01:38.770,0:01:40.920
So looking at this example again.

0:01:40.920,0:01:45.680
We'll start at position one and go all the way to the end where the n is.

0:01:45.680,0:01:51.350
So our last line takes those two values and appends them together.

0:01:51.350,0:01:54.920
It return to the other string, and our string becomes.

0:01:54.920,0:01:55.420
All done.
