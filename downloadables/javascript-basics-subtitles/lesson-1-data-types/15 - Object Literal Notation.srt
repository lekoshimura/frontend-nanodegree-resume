0:00:04.936,0:00:07.330
Why can we access array properties?

0:00:07.330,0:00:10.060
What's so special about arrays?

0:00:10.060,0:00:13.270
>> Arrays are actually special kinds of objects in JavaScript.

0:00:13.270,0:00:15.540
In fact, this is a nice transition.

0:00:15.540,0:00:18.747
Let's get into objects.

0:00:18.747,0:00:22.093
>> Dude, dude, oh, dude.

0:00:23.400,0:00:25.860
My hands are like handy.

0:00:27.630,0:00:28.860
>> Yes they are.

0:00:28.860,0:00:32.670
And while you're staring at your hands, I'm going to be a professional.

0:00:32.670,0:00:33.410
>> Okay.

0:00:33.410,0:00:35.670
What I mean is hands are like objects because,

0:00:35.670,0:00:37.240
they can hold information and do things.

0:00:38.330,0:00:38.830
>> True.

0:00:41.420,0:00:42.050
That is an analogy.

0:00:43.110,0:00:46.860
>> Objects in JavaScript can be declared and defined in a few different ways.

0:00:46.860,0:00:50.430
And all of them are different than the way Python defines classes and

0:00:50.430,0:00:54.670
objects, because there are no classes in JavaScript.

0:00:54.670,0:00:55.790
>> Let's repeat that.

0:00:55.790,0:00:59.630
JavaScript doesn't include classes, just objects.

0:00:59.630,0:01:02.350
There are ways to mimic classes in some respects, but

0:01:02.350,0:01:04.170
they're still just objects.

0:01:04.170,0:01:05.180
>> Right.

0:01:05.180,0:01:07.910
And this has some pretty interesting implications.

0:01:07.910,0:01:10.650
Check out the instructor notes for more information.

0:01:10.650,0:01:14.045
Let's start defining objects with object literal notation.

0:01:14.045,0:01:18.440
In object literal notation, we'll use the same var syntax as we had before.

0:01:18.440,0:01:21.210
Then we'll give the object a name, then an equal sign.

0:01:21.210,0:01:25.220
And then the object is going to be defined within these curly braces.

0:01:25.220,0:01:29.700
These curly braces indicate that you're using object literal notation.

0:01:29.700,0:01:31.730
>> Let's define an object for my biography.

0:01:34.230,0:01:35.910
Then inside the curly braces,

0:01:35.910,0:01:38.930
we can define the object's properties using key value pairs.

0:01:40.180,0:01:44.660
I'll create a property called name and save my name as the value.

0:01:45.740,0:01:50.320
I'll do the same for age, this time using the number 32, my age.

0:01:51.960,0:01:54.860
>> Notice that we surrounded the properties with quotation marks,

0:01:54.860,0:01:59.120
because they're strings and there's a comma between the two key value pairs.

0:02:00.410,0:02:01.820
>> thanks.

0:02:01.820,0:02:04.410
But we can say whatever we want here.

0:02:04.410,0:02:07.360
We could even save an array in our object.

0:02:07.360,0:02:10.479
For instance, I want to add skills to my biography.

0:02:10.479,0:02:13.030
So let's take Cameron's skills from up here and

0:02:13.030,0:02:15.330
add it to my biography down here.

0:02:15.330,0:02:16.340
>> Is that because you're jealous?

0:02:17.940,0:02:18.700
>> Eh, maybe.

0:02:19.910,0:02:21.580
>> This is pretty straightforward.

0:02:21.580,0:02:24.790
To access these properties later, just as we did with the array length,

0:02:24.790,0:02:27.120
we simply add .property after the object name.

0:02:28.670,0:02:32.440
So if I wanted to appended James' name to the page, all I'd need to

0:02:32.440,0:02:38.120
do is access the bio.name property to pull James' name out of his bio object.

0:02:38.120,0:02:42.380
Then, I'll go ahead and append it to the page, come over here, hit refresh.

0:02:42.380,0:02:44.710
We can see that we've got James on our page now.

0:02:45.850,0:02:46.920
>> Nice.

0:02:46.920,0:02:48.090
Let's give our students a shot.
